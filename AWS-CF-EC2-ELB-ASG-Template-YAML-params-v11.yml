AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Created AWS CF template in .yaml format for spinning up an EC2 instance with linux base image and take either t2.nano or t2.small type instance. Hardcode and later parameterize Availability Zone, VPC , Security ID values from the existing EC2 instance.
#elb-asg-test-scalingPolicy-rs-04
#Choose the IAM role for CloudFormation to use for all operations performed on the stack.
Parameters:
  ImageId:
    Description: WebServer EC2 instance typeProvide base AMI or Packer AMI reference
    Type: AWS::EC2::Image::Id
    Default: ami-0080e4c5bc078760e
#update to parameterize - provide in jenkins- variable
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium	  
  AvailabilityZone:
    Description: WebServer EC2 AZ
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-east-1c
    AllowedValues:
      - us-east-1a
      - us-east-1b
      - us-east-1c	  
  KeyName:
    Description: Provide Existing key name.
    Type: AWS::EC2::KeyPair::KeyName
    Default: packer-infy-key
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.	
#  Tags: 
#    Type: String
#    Default: [Key: Name, Value: cf-stack-webserver1]
  SecurityGroupIds:
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-0bee687735f5ada3c
#    Default:
#      - sg-0bee687735f5ada3c
Resources:
  WebInstanceGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - "us-east-1c"
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '3'
#Max 3/4 to test scaling. Include desired
#Include Scaling in /Scaling out policy- memory, cpu usage
#Include lb sg
      LoadBalancerNames: [!Ref 'MyLoadBalancerTest']
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'  
#Include Scaling in /Scaling out policy
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      AvailabilityZone: !Ref AvailabilityZone
      KeyName: !Ref KeyName
      Tags:
        -
          Key: Name
          Value: cf-stack-webserver3	  
      SecurityGroupIds:
        - !Ref SecurityGroupIds
###############Included ScaleUpPolicy based on CPU utilization##############################
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebInstanceGroup'
      Cooldown: '60'
      ScalingAdjustment: 1
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebInstanceGroup'
      Cooldown: '60'
      ScalingAdjustment: -1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 70% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 1
      Threshold: 70
      AlarmActions: [!Ref 'WebServerScaleUpPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'WebInstanceGroup'
      ComparisonOperator: GreaterThanThreshold
#############
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 40% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 1
      Threshold: 40
      AlarmActions: [!Ref 'WebServerScaleDownPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'WebInstanceGroup'
      ComparisonOperator: LessThanThreshold
##############################################
#check and update for min and max 2 servers	
#      AvailabilityZones: !GetAZs ''
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join ['

                  ', [<'<h1>Congratulations, you have successfully launched
                    the AWS CloudFormation sample.</h1>']]
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      KeyName: !Ref 'KeyName'
      ImageId: !Ref ImageId
#      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      InstanceType: !Ref 'InstanceType'
#      AvailabilityZone: !Ref AvailabilityZone
#      Tags:
#        -
#          Key: Name
#          Value: cf-stack-webserver3
      SecurityGroups:
        - Fn::GetAtt: [ LBSecurityGroup, GroupId ]  
#        - !Ref LBSecurityGroup
#      SecurityGroups:
#        - !Ref LBSecurityGroup	  	  
      UserData: !Base64
        Fn::Join:
        - ''
        - ['#!/bin/bash -xe

            ', 'yum update -y aws-cfn-bootstrap

            ', '/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
          '         --resource LaunchConfig ', '         --region ', !Ref 'AWS::Region',
          '

            ', '/opt/aws/bin/cfn-signal -e $? ', '         --stack ', !Ref 'AWS::StackName',
          '         --resource WebInstanceGroup ', '         --region ', !Ref 'AWS::Region',
          '

            ']
  MyLoadBalancerTest:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones:
        - "us-east-1c"
#      Instances:
#        - Ref: WebInstance1
#        - Ref: logical name of AWS::EC2::Instance resource 2
      CrossZone: 'true'
      SecurityGroups:
        - Fn::GetAtt: [ LBSecurityGroup, GroupId ]
#        - !Ref LBSecurityGroup
#      SecurityGroups: !Ref LBSecurityGroup
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
          Target: HTTP:80/
          HealthyThreshold: '3'
          UnhealthyThreshold: '5'
          Interval: '30'
          Timeout: '5'
      ConnectionDrainingPolicy:
          Enabled: 'true'
          Timeout: '300'
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
